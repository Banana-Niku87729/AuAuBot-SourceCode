
const { SlashCommandBuilder, PermissionFlagsBits, ChannelType } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('saba_reset')
        .setDescription('【緊急用】NukeBot被害復旧のため全チャンネルを削除・再作成します')
        .addStringOption(option =>
            option.setName('confirmation')
                .setDescription('実行確認のため"RESET_SERVER"と入力してください')
                .setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        const confirmation = interaction.options.getString('confirmation');

        // 確認文字列をチェック
        if (confirmation !== 'RESET_SERVER') {
            await interaction.reply({
                content: '⚠️ **確認文字列が間違っています**\n実行するには`RESET_SERVER`と正確に入力してください。',
                ephemeral: true
            });
            return;
        }

        // 実行者が管理者権限を持っているかチェック
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            await interaction.reply({
                content: '❌ このコマンドは管理者のみ実行できます。',
                ephemeral: true
            });
            return;
        }

        await interaction.deferReply();

        const guild = interaction.guild;
        let deletedCount = 0;
        let errorCount = 0;

        try {
            // 現在のチャンネルを取得
            const channels = guild.channels.cache.filter(channel => 
                channel.type === ChannelType.GuildText || 
                channel.type === ChannelType.GuildVoice ||
                channel.type === ChannelType.GuildCategory
            );

            await interaction.editReply('🚨 **サーバーリセット開始**\n全チャンネルの削除を開始します...');

            // 全チャンネルを削除
            for (const [, channel] of channels) {
                try {
                    // auau-logチャンネルは保護
                    if (channel.name === 'auau-log') {
                        console.log(`auau-logチャンネルは保護のためスキップしました`);
                        continue;
                    }

                    await channel.delete('NukeBot被害復旧のため削除');
                    deletedCount++;
                    console.log(`チャンネル ${channel.name} を削除しました`);

                    // レート制限を避けるため少し待機
                    await new Promise(resolve => setTimeout(resolve, 500));
                } catch (error) {
                    console.error(`チャンネル ${channel.name} の削除に失敗:`, error);
                    errorCount++;
                }
            }

            await interaction.editReply(
                `🔄 **チャンネル削除完了**\n` +
                `削除成功: ${deletedCount}個\n` +
                `削除失敗: ${errorCount}個\n\n` +
                `基本チャンネルを再作成中...`
            );

            // 基本チャンネルを再作成
            const basicChannels = [
                { name: 'general', type: ChannelType.GuildText, topic: 'サーバーの一般チャット' },
                { name: 'announcements', type: ChannelType.GuildText, topic: '重要なお知らせ' },
                { name: 'General Voice', type: ChannelType.GuildVoice }
            ];

            let createdCount = 0;

            for (const channelData of basicChannels) {
                try {
                    const newChannel = await guild.channels.create({
                        name: channelData.name,
                        type: channelData.type,
                        topic: channelData.topic || undefined,
                        reason: 'NukeBot被害復旧のため再作成'
                    });

                    // 必要なロールの権限を設定
                    const muteRole = guild.roles.cache.find(role => role.name === 'Muted_AuAu');
                    const raidGuardRole = guild.roles.cache.find(role => role.name === 'RaidGuard_AuAu');
                    const appRestrictRole = guild.roles.cache.find(role => role.name === 'AppRestrict_AuAu');

                    if (muteRole && (channelData.type === ChannelType.GuildText || channelData.type === ChannelType.GuildVoice)) {
                        await newChannel.permissionOverwrites.create(muteRole, {
                            SendMessages: false,
                            Speak: false,
                            AddReactions: false,
                            SendMessagesInThreads: false,
                            CreatePublicThreads: false,
                            CreatePrivateThreads: false,
                        });
                    }

                    if (raidGuardRole && channelData.type === ChannelType.GuildText) {
                        await newChannel.permissionOverwrites.create(raidGuardRole, {
                            SendMessages: false,
                            AddReactions: false,
                            SendMessagesInThreads: false,
                            CreatePublicThreads: false,
                            CreatePrivateThreads: false,
                        });
                    }

                    if (appRestrictRole && channelData.type === ChannelType.GuildText) {
                        await newChannel.permissionOverwrites.create(appRestrictRole, {
                            UseApplicationCommands: false,
                        });
                    }

                    createdCount++;
                    console.log(`基本チャンネル ${channelData.name} を作成しました`);

                    await new Promise(resolve => setTimeout(resolve, 300));
                } catch (error) {
                    console.error(`チャンネル ${channelData.name} の作成に失敗:`, error);
                }
            }

            // auau-logチャンネルが存在しない場合は作成
            let logChannel = guild.channels.cache.find(channel => 
                channel.name === 'auau-log' && channel.type === ChannelType.GuildText
            );

            if (!logChannel) {
                logChannel = await guild.channels.create({
                    name: 'auau-log',
                    type: ChannelType.GuildText,
                    permissionOverwrites: [
                        {
                            id: guild.roles.everyone,
                            deny: ['ViewChannel'],
                        },
                        {
                            id: interaction.client.user.id,
                            allow: ['ViewChannel', 'SendMessages'],
                        },
                    ],
                    reason: 'サーバーリセット後のログチャンネル再作成',
                });
                createdCount++;
                console.log('auau-logチャンネルを再作成しました');
            }

            await interaction.editReply(
                `✅ **サーバーリセット完了**\n\n` +
                `📊 **実行結果:**\n` +
                `• 削除されたチャンネル: ${deletedCount}個\n` +
                `• 削除エラー: ${errorCount}個\n` +
                `• 新規作成されたチャンネル: ${createdCount}個\n\n` +
                `🛡️ **復旧状況:**\n` +
                `• 基本チャンネル (general, announcements, General Voice) を再作成\n` +
                `• auau-logチャンネルを確保\n` +
                `• 必要なロール権限を再設定\n\n` +
                `**注意:** 必要に応じて追加のチャンネルやカテゴリーを手動で作成してください。`
            );

            // ログチャンネルに記録
            if (logChannel) {
                await logChannel.send(
                    `🚨 **緊急サーバーリセット実行**\n` +
                    `実行者: ${interaction.user.username} (${interaction.user.id})\n` +
                    `実行時間: ${new Date().toLocaleString('ja-JP')}\n` +
                    `削除チャンネル数: ${deletedCount}個\n` +
                    `再作成チャンネル数: ${createdCount}個\n` +
                    `理由: NukeBot被害復旧`
                );
            }

        } catch (error) {
            console.error('サーバーリセット中にエラーが発生しました:', error);
            await interaction.editReply(
                `❌ **サーバーリセット中にエラーが発生しました**\n` +
                `削除成功: ${deletedCount}個\n` +
                `エラーの詳細はコンソールログを確認してください。`
            );
        }
    }
};
